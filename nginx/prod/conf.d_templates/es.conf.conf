upstream docker-elasticsearch {
    server elasticsearch:9200;
}

server {
    listen 80;
    server_name ${ES_SUBDOMAIN}.${METRICS_HOSTNAME};

    location / {
        return 301 https://$host$request_uri;
    }
}

server {
    listen 443 ssl;
    server_name ${ES_SUBDOMAIN}.${METRICS_HOSTNAME};

    include /etc/letsencrypt/options-ssl-nginx.conf;
    ssl_dhparam /etc/letsencrypt/ssl-dhparams.pem;
    ssl_certificate /etc/letsencrypt/live/${METRICS_HOSTNAME}/fullchain.pem;
    ssl_certificate_key /etc/letsencrypt/live/${METRICS_HOSTNAME}/privkey.pem;

#    # Deny Nodes Shutdown API
#    if ($request_filename ~ "_shutdown") {
#      return 403;
#      break;
#    }

    location / {
        return 403;
        limit_except PUT POST DELETE {
        #   proxy_set_header Host $host;
          proxy_pass http://docker-elasticsearch;
        }
        proxy_redirect off;
   
       location ~* ^(/_cluster|/_nodes|/_shutdown) {
        return 403;
        break;
      }     
#        rewrite ^/(.*) /$1 break;
#        proxy_ignore_client_abort on;
#        proxy_pass http://localhost:9200;
#        proxy_redirect http://localhost:9200 http://usagemetrics.hydroshare.org:8080/;
#        proxy_set_header  X-Real-IP  $remote_addr;
#        proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
#        proxy_set_header  Host $http_host;
    }
}

#upstream elasticsearch {
#    server 0.0.0.0:9200;
#    keepalive 64;
#}
#
#server {
#    listen 8080;
#    server_name usagemetrics.hydroshare.org;
#    error_log /var/log/nginx/elasticsearch.proxy.error.log;
#    access_log off;
#
#    # Deny Nodes Shutdown API
#    if ($request_filename ~ "_shutdown") {
#      return 403;
#      break;
#    }
#
#    location / {
#    
#    # Pass requests to ElasticSearch
#    proxy_pass http://elasticsearch;
#    proxy_redirect off;
#    proxy_http_version 1.1;
#    proxy_set_header Connection "";
#
#    proxy_set_header  X-Real-IP  $remote_addr;
#    proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
#    proxy_set_header  Host $http_host;
#
#    # For CORS Ajax
#    proxy_pass_header Access-Control-Allow-Origin;
#    proxy_pass_header Access-Control-Allow-Methods;
#    proxy_hide_header Access-Control-Allow-Headers;
#    add_header Access-Control-Allow-Headers 'X-Requested-With, Content-Type';
#    add_header Access-Control-Allow-Credentials true;
#  }
#}
